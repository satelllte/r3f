/*
Auto-generated by: https://github.com/pmndrs/gltfjsx (but modified)
Command: bunx gltfjsx@6.2.16 ./public/models/can.glb --types --debug --transform 
*/
'use client';

import type {Mesh, MeshStandardMaterial} from 'three';
import {useGLTF} from '@react-three/drei';
import {type GLTF} from 'three-stdlib';

const path = '/models/can.glb';

// eslint-disable-next-line @typescript-eslint/naming-convention
type GLTFResult = GLTF & {
  nodes: {
    can_1: Mesh;
    can_2: Mesh;
  };
  materials: {
    texture: MeshStandardMaterial;
    metal: MeshStandardMaterial;
  };
};

type GroupProps = React.ComponentProps<'group'>;
type GroupPropsToExtend = Omit<GroupProps, 'dispose' | 'scale'>;
type CanProps = GroupPropsToExtend & {
  readonly scale?: number;
};

export function Can({scale = 1, ...rest}: CanProps) {
  const {nodes, materials} = useGLTF(path) as GLTFResult;
  return (
    <group scale={scale * 5.0} dispose={null} {...rest}>
      <mesh geometry={nodes.can_1.geometry} material={materials.texture} />
      <mesh geometry={nodes.can_2.geometry} material={materials.metal} />
    </group>
  );
}

useGLTF.preload(path);
