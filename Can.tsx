/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/can.glb --types --debug --transform 
Files: ./public/models/can.glb [359.6KB] > /Users/egor.mesyats/dev/r3f/can-transformed.glb [62.03KB] (83%)
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    can_1: THREE.Mesh
    can_2: THREE.Mesh
  }
  materials: {
    texture: THREE.MeshStandardMaterial
    metal: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/can-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.can_1.geometry} material={materials.texture} />
      <mesh geometry={nodes.can_2.geometry} material={materials.metal} />
    </group>
  )
}

useGLTF.preload('/can-transformed.glb')
